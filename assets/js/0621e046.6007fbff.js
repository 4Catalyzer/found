"use strict";(self.webpackChunkfound_docs=self.webpackChunkfound_docs||[]).push([[7979],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function s(n){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),o.createElement(r.Provider,{value:e},n.children)}},9022:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"advanced/names-child-routes","title":"Named child routes","description":"Specify an object for the children property on a route to set up named child routes. A route with named child routes will match only if every route group matches. The elements corresponding to the child routes will be available on their parent as props with the same name as the route groups.","source":"@site/docs/advanced/names-child-routes.md","sourceDirName":"advanced","slug":"/advanced/names-child-routes","permalink":"/found/docs/advanced/names-child-routes","draft":false,"unlisted":false,"editUrl":"https://github.com/4Catalyzer/found/edit/master/www/docs/advanced/names-child-routes.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Redirects","permalink":"/found/docs/advanced/redirects"},"next":{"title":"Custom route classes","permalink":"/found/docs/advanced/custom-route-classes"}}');var a=t(4848),r=t(8453);const s={sidebar_position:4},i="Named child routes",d={},c=[];function u(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"named-child-routes",children:"Named child routes"})}),"\n",(0,a.jsxs)(e.p,{children:["Specify an object for the ",(0,a.jsx)(e.code,{children:"children"})," property on a route to set up named child routes. A route with named child routes will match only if every route group matches. The elements corresponding to the child routes will be available on their parent as props with the same name as the route groups."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-js",children:'function AppPage({ nav, main }) {\n  return (\n    <div className="app">\n      <div className="nav">{nav}</div>\n      <div className="main">{main}</div>\n    </div>\n  );\n}\n\nconst route = {\n  path: "/",\n  Component: AppPage,\n  children: [\n    {\n      path: "foo",\n      children: {\n        nav: [\n          {\n            path: "(.*)?",\n            Component: FooNav,\n          },\n        ],\n        main: [\n          {\n            path: "a",\n            Component: FooA,\n          },\n          {\n            path: "b",\n            Component: FooB,\n          },\n        ],\n      },\n    },\n    {\n      path: "bar",\n      children: {\n        nav: [\n          {\n            path: "(.*)?",\n            Component: BarNav,\n          },\n        ],\n        main: [\n          {\n            Component: BarMain,\n          },\n        ],\n      },\n    },\n  ],\n};\n\n// or equivalent JSX syntax\n\nconst jsxRoute = (\n  <Route path="/" Component={AppPage}>\n    <Route path="foo">\n      {{\n        nav: <Route path="(.*)?" Component={FooNav} />,\n        main: [\n          <Route path="a" Component={FooA} />,\n          <Route path="b" Component={FooB} />,\n        ],\n      }}\n    </Route>\n    <Route path="bar">\n      {{\n        nav: <Route path="(.*)?" Component={BarNav} />,\n        main: <Route Component={BarMain} />,\n      }}\n    </Route>\n  </Route>\n);\n'})})]})}function p(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}}}]);