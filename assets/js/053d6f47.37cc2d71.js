"use strict";(self.webpackChunkfound_docs=self.webpackChunkfound_docs||[]).push([[83],{5768:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(2488),o=n(3808),r=n(2949),s=n(6412),i=n(7294);function p(e){let{children:t,startRoute:n,dependencies:p={}}=e;const d=(e=>i.Children.toArray(e).reduce(((e,t)=>{if("pre"!==t.props.mdxType)return e;const{props:n}=t.props.children;let a,o=!1,r=!1;if(n.metastring){const[e,...t]=n.metastring.split(" ");a=`/${e}`,t.includes("hidden")&&(o=!0),t.includes("active")&&(r=!0)}else if("language-js"===n.className)a="/App.js";else if("language-ts"===n.className)a="/App.tsx";else if("language-tsx"===n.className)a="/App.tsx";else{if("language-css"!==n.className)throw new Error(`Code block is missing a filename: ${n.children}`);a="/styles.css"}if(e[a])throw new Error(`File ${a} was defined multiple times. Each file snippet should have a unique path name`);return e[a]={code:n.children,hidden:o,active:r},e}),{}))(t),{colorMode:u}=(0,r.I)(),l=(0,s.p)();return i.createElement("div",{style:{"--prism-background-color":l.plain.backgroundColor,marginBottom:"2rem"}},i.createElement(a.xR,{template:"react-ts",files:d,theme:"dark"===u?o.cL:o.A1,options:{startRoute:n,showNavigator:!0,editorHeight:400,editorWidthPercentage:60,externalResources:["https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap-reboot.min.css"]},customSetup:{dependencies:{...p,found:"*"}}}))}},2197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var a=n(7462),o=(n(7294),n(3905)),r=n(5768);n(2389);const s={id:"quick-start",sidebar_position:0},i="Quick start",p={unversionedId:"getting-started/quick-start",id:"getting-started/quick-start",title:"Quick start",description:"Found is a router for React applications with a focus on fetching performance and extensibility.",source:"@site/docs/getting-started/quick-start.mdx",sourceDirName:"getting-started",slug:"/getting-started/quick-start",permalink:"/found/docs/getting-started/quick-start",draft:!1,editUrl:"https://github.com/4Catalyzer/found/edit/master/www/docs/getting-started/quick-start.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{id:"quick-start",sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/found/docs/category/getting-started"},next:{title:"How it works",permalink:"/found/docs/getting-started/how-it-works"}},d={},u=[{value:"Installation and setup",id:"installation-and-setup",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Nested routes",id:"nested-routes",level:2},{value:"Dynamic route parameters",id:"dynamic-route-parameters",level:2},{value:"Loading data",id:"loading-data",level:2}],l={toc:u};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quick-start"},"Quick start"),(0,o.kt)("p",null,"Found is a router for ",(0,o.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),' applications with a focus on fetching performance and extensibility.\nFound enables "Render-as-You-Fetch" patterns for efficient code splitting and\ndata fetching in your React applications with or without Suspense. Giving you unmatched control,\nand your user\'s the best experiences.'),(0,o.kt)("p",null,"Found is designed to be extremely customizable. Almost all behavior and piences can be changed or fully replaced.\nIncluding such as the path matching algorithm and the route element resolution.\nThis allows ",(0,o.kt)("a",{parentName:"p",href:"/found/docs/advanced/further-reading"},"extensions")," such as ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/4Catalyzer/found-relay"},"Found Relay")," to\nprovide first-class support for different use cases."),(0,o.kt)("h2",{id:"installation-and-setup"},"Installation and setup"),(0,o.kt)("p",null,"Include the packages in your product via your favorite package manager:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i found\n\n# or yarn\nyarn add found\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"found")," depends on the relatively new async iterators proposal, which may require a ",(0,o.kt)("strong",{parentName:"p"},"polyfill")," of\n",(0,o.kt)("inlineCode",{parentName:"p"},"Symbol.asyncIterator")," for older browsers. Core-js provides one if needed, import ",(0,o.kt)("strong",{parentName:"p"},"before"),"\nimporting found. Check against your supported browser matrix to see if this is necessary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import "core-js/es/symbol/async-iterator";\n')),(0,o.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,o.kt)("p",null,"Found provides rich client-side route, for your Single Page Application. It allows you to define\nyour web application in terms of the URL just like traditional multi-page browser navigation, while\nalso efficiently updating the your page as the URL changes, only loading and changing the parts of your application\nthat need to. This enables unmatched data fetching efficiency and code code splitting, while providing users with a\nfast, ultra-responsive browsering experience."),(0,o.kt)("p",null,'To get started, define the "routes", or urls your application supports and the UI they require.'),(0,o.kt)(r.Z,{mdxType:"SandpackEditor"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createBrowserRouter, Link } from "found";\n\nconst routeConfig = [\n  {\n    path: "/",\n    Component: () => (\n      <div>\n        <h1>Hello World</h1>\n        <Link to="/about">About Us</Link>\n      </div>\n    ),\n  },\n  {\n    path: "/about",\n    Component: () => (\n      <div>\n        <h1>About</h1>\n        <p>Welcome to found</p>\n      </div>\n    ),\n  },\n];\n\nconst BrowserRouter = createBrowserRouter({ routeConfig });\n\nexport default function App() {\n  return <BrowserRouter />;\n}\n'))),(0,o.kt)("p",null,"Routes, can also be specified as JSX if you prefer, using ",(0,o.kt)("inlineCode",{parentName:"p"},"Route"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"makeRouteConfig"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { createRoot } from "react-dom/client";\nimport { createBrowserRouter, Route } from "found";\n\nconst BrowserRouter = createBrowserRouter({\n  routeConfig: makeRouteConfig(\n    <>\n      <Route path="/" Component={HomePage} />\n      <Route path="/about" Component={AboutPage} />\n    </>\n  ),\n});\n')),(0,o.kt)("h2",{id:"nested-routes"},"Nested routes"),(0,o.kt)("p",null,"Best described by found's original inspiration ",(0,o.kt)("inlineCode",{parentName:"p"},"react-router")," (who also borrowed the idea from Ember):"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Nested Routing is the general idea of coupling segments of the URL to component hierarchy and data.")),(0,o.kt)("p",null,'Nested routing is similar to "layouts" in server-side templating languages, allowings reuse of components, as well as\nconnecting components with their data requirements.'),(0,o.kt)(r.Z,{startRoute:"/dashboard",mdxType:"SandpackEditor"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n  createBrowserRouter,\n  makeRouteConfig,\n  Route,\n  Link,\n} from "found";\n\nfunction AppPage({ children }) {\n  return (\n    <div>\n      <nav>\n        <Link to="/dashboard">Dashboard</Link>{" "}\n        <Link to="/about">About</Link>\n      </nav>\n      <main>{children}</main>\n    </div>\n  );\n}\n\nconst Router = createBrowserRouter({\n  routeConfig: makeRouteConfig(\n    <Route path="/" Component={AppPage}>\n      <Route\n        path="dashboard"\n        Component={() => <h1>Dashboard page</h1>}\n      />\n      <Route path="about" Component={() => <h1>About page</h1>} />\n    </Route>\n  ),\n});\n\nexport default function App() {\n  return <Router />;\n}\n'))),(0,o.kt)("p",null,"Here the route passes ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"AppPage")," which will be the resolved nested routes component\nfor the current location. In otherwords, when on ",(0,o.kt)("inlineCode",{parentName:"p"},"/about"),' the "About page" header will render and on\n',(0,o.kt)("inlineCode",{parentName:"p"},"/dashboard"),' "Dashboard page". Because both routes start with ',(0,o.kt)("inlineCode",{parentName:"p"},"/")," they are children of ",(0,o.kt)("inlineCode",{parentName:"p"},"AppPage"),"."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"You can use ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/4Catalyzer/spa-routing"},"spa-routing")," to manage your links in an organized and well-typed way")),(0,o.kt)("h2",{id:"dynamic-route-parameters"},"Dynamic route parameters"),(0,o.kt)("p",null,"Routes, can also be parameterized, allowing you to represent state through URLs. Route components\nare passed ",(0,o.kt)("inlineCode",{parentName:"p"},"match")," as a prop which contains ",(0,o.kt)("inlineCode",{parentName:"p"},"params")," (amoung other things). Any component can access\nthe current route props using ",(0,o.kt)("inlineCode",{parentName:"p"},"useParams")," as well."),(0,o.kt)(r.Z,{startRoute:"customers/1/orders/1",mdxType:"SandpackEditor"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n  createBrowserRouter,\n  makeRouteConfig,\n  Route,\n  Link,\n} from "found";\nimport useParams from "found/useParams";\n\nfunction CustomerPage({ children, match }) {\n  const { customerId } = match.params;\n\n  return (\n    <div>\n      <h1>Customer #{customerId}</h1>\n\n      <h2>Orders</h2>\n      <nav>\n        <Link to={`/customers/${customerId}/orders/1`}>Order 1</Link>{" "}\n        <Link to={`/customers/${customerId}/orders/2`}>Order 2</Link>\n      </nav>\n      <main>{children}</main>\n    </div>\n  );\n}\n\nfunction OrderPage() {\n  const { orderId } = useParams();\n\n  return <div>Order #{orderId}</div>;\n}\n\nconst Router = createBrowserRouter({\n  routeConfig: makeRouteConfig(\n    <Route path="customers/:customerId" Component={CustomerPage}>\n      <Route path="orders/:orderId" Component={OrderPage} />\n    </Route>\n  ),\n});\n\nexport default function App() {\n  return <Router />;\n}\n'))),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"All params are accessible to every component and routes not just the ",(0,o.kt)("inlineCode",{parentName:"p"},"Route")," that\ndeclares it.")),(0,o.kt)("p",null,'Route params are flexible and allow "splats" as well as regular expressions, see ',(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/route-config#path"},"path"),"\nfor all the details."),(0,o.kt)("h2",{id:"loading-data"},"Loading data"),(0,o.kt)("p",null,"Found has out-of-the-box support for efficient data fetching. Add a ",(0,o.kt)("inlineCode",{parentName:"p"},"getData")," function to any route and it's return value\nwill be passed to the Route as a ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop. see ",(0,o.kt)("a",{parentName:"p",href:"data-fetching"},"Data fetching")," for more details about how found\navoids waterfalls and overfetching."),(0,o.kt)(r.Z,{mdxType:"SandpackEditor"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import "./styles.css";\n\nimport { createBrowserRouter, HttpError } from "found";\nimport PostsPage from "./PostsPage";\nimport PostPage from "./PostPage";\n\nasync function fetchFromApi(path: string) {\n  const resp = await fetch(`https://dummyjson.com${path}`);\n\n  if (!resp.ok) throw new HttpError(404);\n  return resp.json();\n}\n\nconst Router = createBrowserRouter({\n  routeConfig: [\n    {\n      path: "/",\n      getData: () => fetchFromApi("/posts"),\n      Component: PostsPage,\n    },\n    {\n      path: "posts/:postId",\n      getData: async ({ params }) =>\n        fetchFromApi(`/posts/${params.postId}/`),\n      Component: PostPage,\n    },\n  ],\n});\n\nexport default function App() {\n  return <Router />;\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"PostsPage.tsx","PostsPage.tsx":!0},'import { Link, RouteComponentDataProps } from "found";\nimport type { Post } from "./PostPage.tsx";\n\nexport default function PostsPage({\n  data,\n  children,\n}: RouteComponentDataProps<{ posts: Post[] }>) {\n  return (\n    <div className="posts">\n      <h1>Posts</h1>\n      {data?.posts.map((post) => (\n        <Link key={post.id} to={`/posts/${post.id}`}>\n          {post.title}\n        </Link>\n      ))}\n    </div>\n  );\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"PostPage.tsx","PostPage.tsx":!0},'import type { RouteComponentDataProps } from "found";\n\nexport interface Post {\n  id: string;\n  title: string;\n  body: string;\n}\n\nexport default function PostPage({\n  data: post,\n  children,\n}: RouteComponentDataProps<Post>) {\n  return (\n    <main>\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n    </main>\n  );\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-css",metastring:"styles.css","styles.css":!0},".posts {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.posts > a {\n  width: 100%;\n  max-width: 200px;\n  text-align: center;\n}\n"))))}c.isMDXComponent=!0}}]);