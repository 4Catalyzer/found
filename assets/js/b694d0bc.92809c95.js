"use strict";(self.webpackChunkfound_docs=self.webpackChunkfound_docs||[]).push([[613],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=a,f=u["".concat(d,".").concat(m)]||u[m]||l[m]||o;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7922:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:3},i="Redirects",s={unversionedId:"advanced/redirects",id:"advanced/redirects",title:"Redirects",description:"The Redirect route class sets up static redirect routes. You can also use it to create JSX ` elements for use with makeRouteConfig. This class takes from and to properties and an optional status property. from should be a path pattern as for normal routes above. to can be either a path pattern or a function. If it is a path pattern, the router will populate path parameters appropriately. If it is a function, it will receive the same routing state object as getComponent and getData, as described above. status is used to set the HTTP status code when redirecting from the server, and defaults to 302` if it is not specified.",source:"@site/docs/advanced/redirects.md",sourceDirName:"advanced",slug:"/advanced/redirects",permalink:"/found/docs/advanced/redirects",draft:!1,editUrl:"https://github.com/4Catalyzer/found/edit/master/www/docs/advanced/redirects.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Error handling",permalink:"/found/docs/advanced/error-handling"},next:{title:"Named child routes",permalink:"/found/docs/advanced/names-child-routes"}},d={},c=[],p={toc:c};function l(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"redirects"},"Redirects"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Redirect")," route class sets up static redirect routes. You can also use it to create JSX ",(0,a.kt)("inlineCode",{parentName:"p"},"<Redirect>")," elements for use with ",(0,a.kt)("inlineCode",{parentName:"p"},"makeRouteConfig"),". This class takes ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"to")," properties and an optional ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," property. ",(0,a.kt)("inlineCode",{parentName:"p"},"from")," should be a path pattern as for normal routes above. ",(0,a.kt)("inlineCode",{parentName:"p"},"to")," can be either a path pattern or a function. If it is a path pattern, the router will populate path parameters appropriately. If it is a function, it will receive the same routing state object as ",(0,a.kt)("inlineCode",{parentName:"p"},"getComponent")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getData"),", as described above. ",(0,a.kt)("inlineCode",{parentName:"p"},"status")," is used to set the HTTP status code when redirecting from the server, and defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},"302")," if it is not specified."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const redirect1 = new Redirect({\n  from: "widget/:widgetId",\n  to: "/widgets/:widgetId",\n});\n\nconst redirect2 = new Redirect({\n  from: "widget/:widgetId",\n  to: ({ params }) => `/widgets/${params.widgetId}`,\n  status: 301,\n});\n\nconst jsxRedirect1 = (\n  <Redirect from="widget/:widgetId" to="/widgets/:widgetId" />\n);\n\nconst jsxRedirect2 = (\n  <Redirect\n    from="widget/:widgetId"\n    to={({ params }) => `/widgets/${params.widgetId}`}\n    status={301}\n  />\n);\n')),(0,a.kt)("p",null,"If you need more custom control over redirection, throw a ",(0,a.kt)("inlineCode",{parentName:"p"},"RedirectException")," in your route's ",(0,a.kt)("inlineCode",{parentName:"p"},"render")," method with a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/4Catalyzer/farce#locations-and-location-descriptors"},"location descriptor")," and optional status code as above for the redirect destination."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const customRedirect = {\n  getData: fetchRedirectInfo,\n  render: ({ data }) => {\n    if (data) {\n      throw new RedirectException(data.redirectLocation);\n    }\n  },\n};\n\nconst permanentRedirect = {\n  render: () => {\n    throw new RedirectException("/widgets", 301);\n  },\n};\n')))}l.isMDXComponent=!0}}]);